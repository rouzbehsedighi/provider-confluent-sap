---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.13.0
  name: schemas.confluent.crossplane.io
spec:
  group: confluent.crossplane.io
  names:
    categories:
    - crossplane
    - managed
    - confluent
    kind: Schema
    listKind: SchemaList
    plural: schemas
    singular: schema
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: READY
      type: string
    - jsonPath: .status.conditions[?(@.type=='Synced')].status
      name: SYNCED
      type: string
    - jsonPath: .metadata.annotations.crossplane\.io/external-name
      name: EXTERNAL-NAME
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Schema is the Schema for the Schemas API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: SchemaSpec defines the desired state of Schema
            properties:
              deletionPolicy:
                default: Delete
                description: 'DeletionPolicy specifies what will happen to the underlying
                  external when this managed resource is deleted - either "Delete"
                  or "Orphan" the external resource. This field is planned to be deprecated
                  in favor of the ManagementPolicies field in a future release. Currently,
                  both could be set independently and non-default values would be
                  honored if the feature flag is enabled. See the design doc for more
                  information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223'
                enum:
                - Orphan
                - Delete
                type: string
              forProvider:
                properties:
                  credentials:
                    description: 'supports the following: The Cluster API Credentials.'
                    items:
                      properties:
                        keySecretRef:
                          description: The Schema Registry API Key. The Cluster API
                            Key for your Confluent Cloud cluster.
                          properties:
                            key:
                              description: The key to select.
                              type: string
                            name:
                              description: Name of the secret.
                              type: string
                            namespace:
                              description: Namespace of the secret.
                              type: string
                          required:
                          - key
                          - name
                          - namespace
                          type: object
                        secretSecretRef:
                          description: The Schema Registry API Secret. The Cluster
                            API Secret for your Confluent Cloud cluster.
                          properties:
                            key:
                              description: The key to select.
                              type: string
                            name:
                              description: Name of the secret.
                              type: string
                            namespace:
                              description: Namespace of the secret.
                              type: string
                          required:
                          - key
                          - name
                          - namespace
                          type: object
                      required:
                      - keySecretRef
                      - secretSecretRef
                      type: object
                    type: array
                  format:
                    description: 'The format of the schema. Accepted values are: AVRO,
                      PROTOBUF, and JSON. The format of the Schema.'
                    type: string
                  hardDelete:
                    description: An optional flag to control whether a schema should
                      be soft or hard deleted. Set it to true if you want to hard
                      delete a schema on destroy (see Schema Deletion Guidelines for
                      more details). Must be unset when importing. Defaults to false
                      (soft delete). Controls whether a schema should be soft or hard
                      deleted. Set it to `true` if you want to hard delete a schema
                      on destroy. Defaults to `false` (soft delete). Defaults to `false`.
                    type: boolean
                  metadata:
                    description: 'See here for more details. Supports the following:'
                    items:
                      properties:
                        properties:
                          additionalProperties:
                            type: string
                          description: 'The custom properties to set:'
                          type: object
                        sensitive:
                          description: A list of metadata properties to be encrypted.
                          items:
                            type: string
                          type: array
                        tags:
                          description: 'supports the following:'
                          items:
                            properties:
                              key:
                                description: The Schema Registry API Key.
                                type: string
                              value:
                                description: The setting value.
                                items:
                                  type: string
                                type: array
                            type: object
                          type: array
                      type: object
                    type: array
                  recreateOnUpdate:
                    description: An optional flag to control whether a schema should
                      be recreated on an update. Set it to true if you want to manage
                      different schema versions using different resource instances.
                      Must be set to the target value when importing. Defaults to
                      false, which manages the latest schema version only. The resource
                      instance always points to the latest schema version by supporting
                      in-place updates. Controls whether a schema should be recreated
                      on update. Defaults to `false`.
                    type: boolean
                  restEndpoint:
                    description: 'The REST endpoint of the Schema Registry cluster.
                      For example, for public networking: https://psrc-00000.us-central1.gcp.confluent.cloud.
                      In the case of private networking, the endpoint might look like
                      https://lsrc-abc123.pr1jy6.us-east-2.aws.confluent.cloud. You
                      can construct it using either: The REST endpoint of the Schema
                      Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).'
                    type: string
                  ruleset:
                    description: The list of schema rules. See Data Contracts for
                      Schema Registry for more details. For example, these rules can
                      enforce that a field that contains sensitive information must
                      be encrypted, or that a message containing an invalid age must
                      be sent to a dead letter queue.
                    items:
                      properties:
                        domainRules:
                          description: 'supports the following:'
                          items:
                            properties:
                              disabled:
                                description: The boolean flag to control whether the
                                  rule should be disabled. Defaults to false. Defaults
                                  to `false`.
                                type: boolean
                              doc:
                                description: An optional description of the rule.
                                  Defaults to "". Defaults to “.
                                type: string
                              expr:
                                description: The rule body. Data quality and transformation
                                  rules use CEL language expressions, data migration
                                  rules use JSONata expressions. Defaults to "". Defaults
                                  to “.
                                type: string
                              kind:
                                description: The kind of the rule. Accepted values
                                  are CONDITION and TRANSFORM. CONDITION - validate
                                  the value of a field, TRANSFORM - transform the
                                  value of a field. Data quality rules use CONDITION
                                  kind, data transformation, encryption and migration
                                  rules use TRANSFORM kind.
                                type: string
                              mode:
                                description: The mode of the rule. Accepted values
                                  are UPGRADE, DOWNGRADE, UPDOWN, WRITE, READ, and
                                  WRITEREAD.
                                type: string
                              name:
                                description: The name of the subject, representing
                                  the subject under which the referenced schema is
                                  registered.
                                type: string
                              onFailure:
                                description: An optional action to execute if the
                                  rule fails, otherwise the built-in action type ERROR
                                  is used. For UPDOWN and WRITEREAD rules, one can
                                  specify two actions separated by commas, as mentioned
                                  above. Defaults to ERROR,ERROR. Defaults to `ERROR,ERROR`.
                                type: string
                              onSuccess:
                                description: An optional action to execute if the
                                  rule succeeds, otherwise the built-in action type
                                  NONE is used. For UPDOWN and WRITEREAD rules, one
                                  can specify two actions separated by commas, such
                                  as NONE,ERROR for a WRITEREAD rule. In this case
                                  NONE applies to WRITE and ERROR applies to READ.
                                  Defaults to NONE,NONE. Defaults to `NONE,NONE`.
                                type: string
                              params:
                                additionalProperties:
                                  type: string
                                description: A set of static parameters for the rule,
                                  which is optional. These are key-value pairs that
                                  are passed to the rule.
                                type: object
                              tags:
                                description: 'supports the following:'
                                items:
                                  type: string
                                type: array
                              type:
                                description: The type of rule, which invokes a specific
                                  rule executor that that will run the rule. Google
                                  Common Expression Language (CEL) is used for data
                                  quality and transformation rules, Confluent ENCRYPT
                                  is used for data encryption rules, and JSONata is
                                  used for migration rules.
                                type: string
                            type: object
                          type: array
                        migrationRules:
                          description: 'supports the following:'
                          items:
                            properties:
                              disabled:
                                description: The boolean flag to control whether the
                                  rule should be disabled. Defaults to false. Defaults
                                  to `false`.
                                type: boolean
                              doc:
                                description: An optional description of the rule.
                                  Defaults to "". Defaults to “.
                                type: string
                              expr:
                                description: The rule body. Data quality and transformation
                                  rules use CEL language expressions, data migration
                                  rules use JSONata expressions. Defaults to "". Defaults
                                  to “.
                                type: string
                              kind:
                                description: The kind of the rule. Accepted values
                                  are CONDITION and TRANSFORM. CONDITION - validate
                                  the value of a field, TRANSFORM - transform the
                                  value of a field. Data quality rules use CONDITION
                                  kind, data transformation, encryption and migration
                                  rules use TRANSFORM kind.
                                type: string
                              mode:
                                description: The mode of the rule. Accepted values
                                  are UPGRADE, DOWNGRADE, UPDOWN, WRITE, READ, and
                                  WRITEREAD.
                                type: string
                              name:
                                description: The name of the subject, representing
                                  the subject under which the referenced schema is
                                  registered.
                                type: string
                              onFailure:
                                description: An optional action to execute if the
                                  rule fails, otherwise the built-in action type ERROR
                                  is used. For UPDOWN and WRITEREAD rules, one can
                                  specify two actions separated by commas, as mentioned
                                  above. Defaults to ERROR,ERROR. Defaults to `ERROR,ERROR`.
                                type: string
                              onSuccess:
                                description: An optional action to execute if the
                                  rule succeeds, otherwise the built-in action type
                                  NONE is used. For UPDOWN and WRITEREAD rules, one
                                  can specify two actions separated by commas, such
                                  as NONE,ERROR for a WRITEREAD rule. In this case
                                  NONE applies to WRITE and ERROR applies to READ.
                                  Defaults to NONE,NONE. Defaults to `NONE,NONE`.
                                type: string
                              params:
                                additionalProperties:
                                  type: string
                                description: A set of static parameters for the rule,
                                  which is optional. These are key-value pairs that
                                  are passed to the rule.
                                type: object
                              tags:
                                description: 'supports the following:'
                                items:
                                  type: string
                                type: array
                              type:
                                description: The type of rule, which invokes a specific
                                  rule executor that that will run the rule. Google
                                  Common Expression Language (CEL) is used for data
                                  quality and transformation rules, Confluent ENCRYPT
                                  is used for data encryption rules, and JSONata is
                                  used for migration rules.
                                type: string
                            type: object
                          type: array
                      type: object
                    type: array
                  schema:
                    description: The schema string, for example, file("./schema_version_1.avsc").
                      The definition of the Schema.
                    type: string
                  schemaReference:
                    description: 'The list of referenced schemas (see Schema References
                      for more details): The list of references to other Schemas.'
                    items:
                      properties:
                        name:
                          description: The name of the subject, representing the subject
                            under which the referenced schema is registered. The name
                            of the Schema references (for example, "io.confluent.kafka.example.User").
                            For Avro, the reference name is the fully qualified schema
                            name, for JSON Schema it is a URL, and for Protobuf, it
                            is the name of another Protobuf file.
                          type: string
                        subjectName:
                          description: The name for the reference. (For Avro Schema,
                            the reference name is the fully qualified schema name,
                            for JSON Schema it is a URL, and for Protobuf Schema,
                            it is the name of another Protobuf file.) The name of
                            the referenced Schema Registry Subject (for example, "User").
                          type: string
                        version:
                          description: The version, representing the exact version
                            of the schema under the registered subject. The version
                            of the referenced Schema.
                          type: number
                      type: object
                    type: array
                  schemaRegistryCluster:
                    description: 'supports the following:'
                    items:
                      properties:
                        id:
                          description: The ID of the Schema Registry cluster, for
                            example, lsrc-abc123. The Schema Registry cluster ID (e.g.,
                            `lsrc-abc123`).
                          type: string
                      type: object
                    type: array
                  skipValidationDuringPlan:
                    description: Defaults to false. Defaults to `false`.
                    type: boolean
                  subjectName:
                    description: The name for the reference. (For Avro Schema, the
                      reference name is the fully qualified schema name, for JSON
                      Schema it is a URL, and for Protobuf Schema, it is the name
                      of another Protobuf file.) The name of the Schema Registry Subject.
                    type: string
                type: object
              initProvider:
                description: THIS IS A BETA FIELD. It will be honored unless the Management
                  Policies feature flag is disabled. InitProvider holds the same fields
                  as ForProvider, with the exception of Identifier and other resource
                  reference fields. The fields that are in InitProvider are merged
                  into ForProvider when the resource is created. The same fields are
                  also added to the terraform ignore_changes hook, to avoid updating
                  them after creation. This is useful for fields that are required
                  on creation, but we do not desire to update them after creation,
                  for example because of an external controller is managing them,
                  like an autoscaler.
                properties:
                  credentials:
                    description: 'supports the following: The Cluster API Credentials.'
                    items:
                      type: object
                    type: array
                  format:
                    description: 'The format of the schema. Accepted values are: AVRO,
                      PROTOBUF, and JSON. The format of the Schema.'
                    type: string
                  hardDelete:
                    description: An optional flag to control whether a schema should
                      be soft or hard deleted. Set it to true if you want to hard
                      delete a schema on destroy (see Schema Deletion Guidelines for
                      more details). Must be unset when importing. Defaults to false
                      (soft delete). Controls whether a schema should be soft or hard
                      deleted. Set it to `true` if you want to hard delete a schema
                      on destroy. Defaults to `false` (soft delete). Defaults to `false`.
                    type: boolean
                  metadata:
                    description: 'See here for more details. Supports the following:'
                    items:
                      properties:
                        properties:
                          additionalProperties:
                            type: string
                          description: 'The custom properties to set:'
                          type: object
                        sensitive:
                          description: A list of metadata properties to be encrypted.
                          items:
                            type: string
                          type: array
                        tags:
                          description: 'supports the following:'
                          items:
                            properties:
                              key:
                                description: The Schema Registry API Key.
                                type: string
                              value:
                                description: The setting value.
                                items:
                                  type: string
                                type: array
                            type: object
                          type: array
                      type: object
                    type: array
                  recreateOnUpdate:
                    description: An optional flag to control whether a schema should
                      be recreated on an update. Set it to true if you want to manage
                      different schema versions using different resource instances.
                      Must be set to the target value when importing. Defaults to
                      false, which manages the latest schema version only. The resource
                      instance always points to the latest schema version by supporting
                      in-place updates. Controls whether a schema should be recreated
                      on update. Defaults to `false`.
                    type: boolean
                  restEndpoint:
                    description: 'The REST endpoint of the Schema Registry cluster.
                      For example, for public networking: https://psrc-00000.us-central1.gcp.confluent.cloud.
                      In the case of private networking, the endpoint might look like
                      https://lsrc-abc123.pr1jy6.us-east-2.aws.confluent.cloud. You
                      can construct it using either: The REST endpoint of the Schema
                      Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).'
                    type: string
                  ruleset:
                    description: The list of schema rules. See Data Contracts for
                      Schema Registry for more details. For example, these rules can
                      enforce that a field that contains sensitive information must
                      be encrypted, or that a message containing an invalid age must
                      be sent to a dead letter queue.
                    items:
                      properties:
                        domainRules:
                          description: 'supports the following:'
                          items:
                            properties:
                              disabled:
                                description: The boolean flag to control whether the
                                  rule should be disabled. Defaults to false. Defaults
                                  to `false`.
                                type: boolean
                              doc:
                                description: An optional description of the rule.
                                  Defaults to "". Defaults to “.
                                type: string
                              expr:
                                description: The rule body. Data quality and transformation
                                  rules use CEL language expressions, data migration
                                  rules use JSONata expressions. Defaults to "". Defaults
                                  to “.
                                type: string
                              kind:
                                description: The kind of the rule. Accepted values
                                  are CONDITION and TRANSFORM. CONDITION - validate
                                  the value of a field, TRANSFORM - transform the
                                  value of a field. Data quality rules use CONDITION
                                  kind, data transformation, encryption and migration
                                  rules use TRANSFORM kind.
                                type: string
                              mode:
                                description: The mode of the rule. Accepted values
                                  are UPGRADE, DOWNGRADE, UPDOWN, WRITE, READ, and
                                  WRITEREAD.
                                type: string
                              name:
                                description: The name of the subject, representing
                                  the subject under which the referenced schema is
                                  registered.
                                type: string
                              onFailure:
                                description: An optional action to execute if the
                                  rule fails, otherwise the built-in action type ERROR
                                  is used. For UPDOWN and WRITEREAD rules, one can
                                  specify two actions separated by commas, as mentioned
                                  above. Defaults to ERROR,ERROR. Defaults to `ERROR,ERROR`.
                                type: string
                              onSuccess:
                                description: An optional action to execute if the
                                  rule succeeds, otherwise the built-in action type
                                  NONE is used. For UPDOWN and WRITEREAD rules, one
                                  can specify two actions separated by commas, such
                                  as NONE,ERROR for a WRITEREAD rule. In this case
                                  NONE applies to WRITE and ERROR applies to READ.
                                  Defaults to NONE,NONE. Defaults to `NONE,NONE`.
                                type: string
                              params:
                                additionalProperties:
                                  type: string
                                description: A set of static parameters for the rule,
                                  which is optional. These are key-value pairs that
                                  are passed to the rule.
                                type: object
                              tags:
                                description: 'supports the following:'
                                items:
                                  type: string
                                type: array
                              type:
                                description: The type of rule, which invokes a specific
                                  rule executor that that will run the rule. Google
                                  Common Expression Language (CEL) is used for data
                                  quality and transformation rules, Confluent ENCRYPT
                                  is used for data encryption rules, and JSONata is
                                  used for migration rules.
                                type: string
                            type: object
                          type: array
                        migrationRules:
                          description: 'supports the following:'
                          items:
                            properties:
                              disabled:
                                description: The boolean flag to control whether the
                                  rule should be disabled. Defaults to false. Defaults
                                  to `false`.
                                type: boolean
                              doc:
                                description: An optional description of the rule.
                                  Defaults to "". Defaults to “.
                                type: string
                              expr:
                                description: The rule body. Data quality and transformation
                                  rules use CEL language expressions, data migration
                                  rules use JSONata expressions. Defaults to "". Defaults
                                  to “.
                                type: string
                              kind:
                                description: The kind of the rule. Accepted values
                                  are CONDITION and TRANSFORM. CONDITION - validate
                                  the value of a field, TRANSFORM - transform the
                                  value of a field. Data quality rules use CONDITION
                                  kind, data transformation, encryption and migration
                                  rules use TRANSFORM kind.
                                type: string
                              mode:
                                description: The mode of the rule. Accepted values
                                  are UPGRADE, DOWNGRADE, UPDOWN, WRITE, READ, and
                                  WRITEREAD.
                                type: string
                              name:
                                description: The name of the subject, representing
                                  the subject under which the referenced schema is
                                  registered.
                                type: string
                              onFailure:
                                description: An optional action to execute if the
                                  rule fails, otherwise the built-in action type ERROR
                                  is used. For UPDOWN and WRITEREAD rules, one can
                                  specify two actions separated by commas, as mentioned
                                  above. Defaults to ERROR,ERROR. Defaults to `ERROR,ERROR`.
                                type: string
                              onSuccess:
                                description: An optional action to execute if the
                                  rule succeeds, otherwise the built-in action type
                                  NONE is used. For UPDOWN and WRITEREAD rules, one
                                  can specify two actions separated by commas, such
                                  as NONE,ERROR for a WRITEREAD rule. In this case
                                  NONE applies to WRITE and ERROR applies to READ.
                                  Defaults to NONE,NONE. Defaults to `NONE,NONE`.
                                type: string
                              params:
                                additionalProperties:
                                  type: string
                                description: A set of static parameters for the rule,
                                  which is optional. These are key-value pairs that
                                  are passed to the rule.
                                type: object
                              tags:
                                description: 'supports the following:'
                                items:
                                  type: string
                                type: array
                              type:
                                description: The type of rule, which invokes a specific
                                  rule executor that that will run the rule. Google
                                  Common Expression Language (CEL) is used for data
                                  quality and transformation rules, Confluent ENCRYPT
                                  is used for data encryption rules, and JSONata is
                                  used for migration rules.
                                type: string
                            type: object
                          type: array
                      type: object
                    type: array
                  schema:
                    description: The schema string, for example, file("./schema_version_1.avsc").
                      The definition of the Schema.
                    type: string
                  schemaReference:
                    description: 'The list of referenced schemas (see Schema References
                      for more details): The list of references to other Schemas.'
                    items:
                      properties:
                        name:
                          description: The name of the subject, representing the subject
                            under which the referenced schema is registered. The name
                            of the Schema references (for example, "io.confluent.kafka.example.User").
                            For Avro, the reference name is the fully qualified schema
                            name, for JSON Schema it is a URL, and for Protobuf, it
                            is the name of another Protobuf file.
                          type: string
                        subjectName:
                          description: The name for the reference. (For Avro Schema,
                            the reference name is the fully qualified schema name,
                            for JSON Schema it is a URL, and for Protobuf Schema,
                            it is the name of another Protobuf file.) The name of
                            the referenced Schema Registry Subject (for example, "User").
                          type: string
                        version:
                          description: The version, representing the exact version
                            of the schema under the registered subject. The version
                            of the referenced Schema.
                          type: number
                      type: object
                    type: array
                  schemaRegistryCluster:
                    description: 'supports the following:'
                    items:
                      properties:
                        id:
                          description: The ID of the Schema Registry cluster, for
                            example, lsrc-abc123. The Schema Registry cluster ID (e.g.,
                            `lsrc-abc123`).
                          type: string
                      type: object
                    type: array
                  skipValidationDuringPlan:
                    description: Defaults to false. Defaults to `false`.
                    type: boolean
                  subjectName:
                    description: The name for the reference. (For Avro Schema, the
                      reference name is the fully qualified schema name, for JSON
                      Schema it is a URL, and for Protobuf Schema, it is the name
                      of another Protobuf file.) The name of the Schema Registry Subject.
                    type: string
                type: object
              managementPolicies:
                default:
                - '*'
                description: 'THIS IS A BETA FIELD. It is on by default but can be
                  opted out through a Crossplane feature flag. ManagementPolicies
                  specify the array of actions Crossplane is allowed to take on the
                  managed and external resources. This field is planned to replace
                  the DeletionPolicy field in a future release. Currently, both could
                  be set independently and non-default values would be honored if
                  the feature flag is enabled. If both are custom, the DeletionPolicy
                  field will be ignored. See the design doc for more information:
                  https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
                  and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md'
                items:
                  description: A ManagementAction represents an action that the Crossplane
                    controllers can take on an external resource.
                  enum:
                  - Observe
                  - Create
                  - Update
                  - Delete
                  - LateInitialize
                  - '*'
                  type: string
                type: array
              providerConfigRef:
                default:
                  name: default
                description: ProviderConfigReference specifies how the provider that
                  will be used to create, observe, update, and delete this managed
                  resource should be configured.
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: Resolution specifies whether resolution of this
                          reference is required. The default is 'Required', which
                          means the reconcile will fail if the reference cannot be
                          resolved. 'Optional' means this reference will be a no-op
                          if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: Resolve specifies when this reference should
                          be resolved. The default is 'IfNotPresent', which will attempt
                          to resolve the reference only when the corresponding field
                          is not present. Use 'Always' to resolve the reference on
                          every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              publishConnectionDetailsTo:
                description: PublishConnectionDetailsTo specifies the connection secret
                  config which contains a name, metadata and a reference to secret
                  store config to which any connection details for this managed resource
                  should be written. Connection details frequently include the endpoint,
                  username, and password required to connect to the managed resource.
                properties:
                  configRef:
                    default:
                      name: default
                    description: SecretStoreConfigRef specifies which secret store
                      config should be used for this ConnectionSecret.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: Resolution specifies whether resolution of
                              this reference is required. The default is 'Required',
                              which means the reconcile will fail if the reference
                              cannot be resolved. 'Optional' means this reference
                              will be a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: Resolve specifies when this reference should
                              be resolved. The default is 'IfNotPresent', which will
                              attempt to resolve the reference only when the corresponding
                              field is not present. Use 'Always' to resolve the reference
                              on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  metadata:
                    description: Metadata is the metadata for connection secret.
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: Annotations are the annotations to be added to
                          connection secret. - For Kubernetes secrets, this will be
                          used as "metadata.annotations". - It is up to Secret Store
                          implementation for others store types.
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: Labels are the labels/tags to be added to connection
                          secret. - For Kubernetes secrets, this will be used as "metadata.labels".
                          - It is up to Secret Store implementation for others store
                          types.
                        type: object
                      type:
                        description: Type is the SecretType for the connection secret.
                          - Only valid for Kubernetes Secret Stores.
                        type: string
                    type: object
                  name:
                    description: Name is the name of the connection secret.
                    type: string
                required:
                - name
                type: object
              writeConnectionSecretToRef:
                description: WriteConnectionSecretToReference specifies the namespace
                  and name of a Secret to which any connection details for this managed
                  resource should be written. Connection details frequently include
                  the endpoint, username, and password required to connect to the
                  managed resource. This field is planned to be replaced in a future
                  release in favor of PublishConnectionDetailsTo. Currently, both
                  could be set independently and connection details would be published
                  to both without affecting each other.
                properties:
                  name:
                    description: Name of the secret.
                    type: string
                  namespace:
                    description: Namespace of the secret.
                    type: string
                required:
                - name
                - namespace
                type: object
            required:
            - forProvider
            type: object
            x-kubernetes-validations:
            - message: spec.forProvider.format is a required parameter
              rule: '!(''*'' in self.managementPolicies || ''Create'' in self.managementPolicies
                || ''Update'' in self.managementPolicies) || has(self.forProvider.format)
                || (has(self.initProvider) && has(self.initProvider.format))'
            - message: spec.forProvider.subjectName is a required parameter
              rule: '!(''*'' in self.managementPolicies || ''Create'' in self.managementPolicies
                || ''Update'' in self.managementPolicies) || has(self.forProvider.subjectName)
                || (has(self.initProvider) && has(self.initProvider.subjectName))'
          status:
            description: SchemaStatus defines the observed state of Schema.
            properties:
              atProvider:
                properties:
                  credentials:
                    description: 'supports the following: The Cluster API Credentials.'
                    items:
                      properties:
                        keySecretRef:
                          description: The Schema Registry API Key. The Cluster API
                            Key for your Confluent Cloud cluster.
                          properties:
                            key:
                              description: The key to select.
                              type: string
                            name:
                              description: Name of the secret.
                              type: string
                            namespace:
                              description: Namespace of the secret.
                              type: string
                          required:
                          - key
                          - name
                          - namespace
                          type: object
                        secretSecretRef:
                          description: The Schema Registry API Secret. The Cluster
                            API Secret for your Confluent Cloud cluster.
                          properties:
                            key:
                              description: The key to select.
                              type: string
                            name:
                              description: Name of the secret.
                              type: string
                            namespace:
                              description: Namespace of the secret.
                              type: string
                          required:
                          - key
                          - name
                          - namespace
                          type: object
                      required:
                      - keySecretRef
                      - secretSecretRef
                      type: object
                    type: array
                  format:
                    description: 'The format of the schema. Accepted values are: AVRO,
                      PROTOBUF, and JSON. The format of the Schema.'
                    type: string
                  hardDelete:
                    description: An optional flag to control whether a schema should
                      be soft or hard deleted. Set it to true if you want to hard
                      delete a schema on destroy (see Schema Deletion Guidelines for
                      more details). Must be unset when importing. Defaults to false
                      (soft delete). Controls whether a schema should be soft or hard
                      deleted. Set it to `true` if you want to hard delete a schema
                      on destroy. Defaults to `false` (soft delete). Defaults to `false`.
                    type: boolean
                  id:
                    description: The ID of the Schema Registry cluster, for example,
                      lsrc-abc123.
                    type: string
                  metadata:
                    description: 'See here for more details. Supports the following:'
                    items:
                      properties:
                        properties:
                          additionalProperties:
                            type: string
                          description: 'The custom properties to set:'
                          type: object
                        sensitive:
                          description: A list of metadata properties to be encrypted.
                          items:
                            type: string
                          type: array
                        tags:
                          description: 'supports the following:'
                          items:
                            properties:
                              key:
                                description: The Schema Registry API Key.
                                type: string
                              value:
                                description: The setting value.
                                items:
                                  type: string
                                type: array
                            type: object
                          type: array
                      type: object
                    type: array
                  recreateOnUpdate:
                    description: An optional flag to control whether a schema should
                      be recreated on an update. Set it to true if you want to manage
                      different schema versions using different resource instances.
                      Must be set to the target value when importing. Defaults to
                      false, which manages the latest schema version only. The resource
                      instance always points to the latest schema version by supporting
                      in-place updates. Controls whether a schema should be recreated
                      on update. Defaults to `false`.
                    type: boolean
                  restEndpoint:
                    description: 'The REST endpoint of the Schema Registry cluster.
                      For example, for public networking: https://psrc-00000.us-central1.gcp.confluent.cloud.
                      In the case of private networking, the endpoint might look like
                      https://lsrc-abc123.pr1jy6.us-east-2.aws.confluent.cloud. You
                      can construct it using either: The REST endpoint of the Schema
                      Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).'
                    type: string
                  ruleset:
                    description: The list of schema rules. See Data Contracts for
                      Schema Registry for more details. For example, these rules can
                      enforce that a field that contains sensitive information must
                      be encrypted, or that a message containing an invalid age must
                      be sent to a dead letter queue.
                    items:
                      properties:
                        domainRules:
                          description: 'supports the following:'
                          items:
                            properties:
                              disabled:
                                description: The boolean flag to control whether the
                                  rule should be disabled. Defaults to false. Defaults
                                  to `false`.
                                type: boolean
                              doc:
                                description: An optional description of the rule.
                                  Defaults to "". Defaults to “.
                                type: string
                              expr:
                                description: The rule body. Data quality and transformation
                                  rules use CEL language expressions, data migration
                                  rules use JSONata expressions. Defaults to "". Defaults
                                  to “.
                                type: string
                              kind:
                                description: The kind of the rule. Accepted values
                                  are CONDITION and TRANSFORM. CONDITION - validate
                                  the value of a field, TRANSFORM - transform the
                                  value of a field. Data quality rules use CONDITION
                                  kind, data transformation, encryption and migration
                                  rules use TRANSFORM kind.
                                type: string
                              mode:
                                description: The mode of the rule. Accepted values
                                  are UPGRADE, DOWNGRADE, UPDOWN, WRITE, READ, and
                                  WRITEREAD.
                                type: string
                              name:
                                description: The name of the subject, representing
                                  the subject under which the referenced schema is
                                  registered.
                                type: string
                              onFailure:
                                description: An optional action to execute if the
                                  rule fails, otherwise the built-in action type ERROR
                                  is used. For UPDOWN and WRITEREAD rules, one can
                                  specify two actions separated by commas, as mentioned
                                  above. Defaults to ERROR,ERROR. Defaults to `ERROR,ERROR`.
                                type: string
                              onSuccess:
                                description: An optional action to execute if the
                                  rule succeeds, otherwise the built-in action type
                                  NONE is used. For UPDOWN and WRITEREAD rules, one
                                  can specify two actions separated by commas, such
                                  as NONE,ERROR for a WRITEREAD rule. In this case
                                  NONE applies to WRITE and ERROR applies to READ.
                                  Defaults to NONE,NONE. Defaults to `NONE,NONE`.
                                type: string
                              params:
                                additionalProperties:
                                  type: string
                                description: A set of static parameters for the rule,
                                  which is optional. These are key-value pairs that
                                  are passed to the rule.
                                type: object
                              tags:
                                description: 'supports the following:'
                                items:
                                  type: string
                                type: array
                              type:
                                description: The type of rule, which invokes a specific
                                  rule executor that that will run the rule. Google
                                  Common Expression Language (CEL) is used for data
                                  quality and transformation rules, Confluent ENCRYPT
                                  is used for data encryption rules, and JSONata is
                                  used for migration rules.
                                type: string
                            type: object
                          type: array
                        migrationRules:
                          description: 'supports the following:'
                          items:
                            properties:
                              disabled:
                                description: The boolean flag to control whether the
                                  rule should be disabled. Defaults to false. Defaults
                                  to `false`.
                                type: boolean
                              doc:
                                description: An optional description of the rule.
                                  Defaults to "". Defaults to “.
                                type: string
                              expr:
                                description: The rule body. Data quality and transformation
                                  rules use CEL language expressions, data migration
                                  rules use JSONata expressions. Defaults to "". Defaults
                                  to “.
                                type: string
                              kind:
                                description: The kind of the rule. Accepted values
                                  are CONDITION and TRANSFORM. CONDITION - validate
                                  the value of a field, TRANSFORM - transform the
                                  value of a field. Data quality rules use CONDITION
                                  kind, data transformation, encryption and migration
                                  rules use TRANSFORM kind.
                                type: string
                              mode:
                                description: The mode of the rule. Accepted values
                                  are UPGRADE, DOWNGRADE, UPDOWN, WRITE, READ, and
                                  WRITEREAD.
                                type: string
                              name:
                                description: The name of the subject, representing
                                  the subject under which the referenced schema is
                                  registered.
                                type: string
                              onFailure:
                                description: An optional action to execute if the
                                  rule fails, otherwise the built-in action type ERROR
                                  is used. For UPDOWN and WRITEREAD rules, one can
                                  specify two actions separated by commas, as mentioned
                                  above. Defaults to ERROR,ERROR. Defaults to `ERROR,ERROR`.
                                type: string
                              onSuccess:
                                description: An optional action to execute if the
                                  rule succeeds, otherwise the built-in action type
                                  NONE is used. For UPDOWN and WRITEREAD rules, one
                                  can specify two actions separated by commas, such
                                  as NONE,ERROR for a WRITEREAD rule. In this case
                                  NONE applies to WRITE and ERROR applies to READ.
                                  Defaults to NONE,NONE. Defaults to `NONE,NONE`.
                                type: string
                              params:
                                additionalProperties:
                                  type: string
                                description: A set of static parameters for the rule,
                                  which is optional. These are key-value pairs that
                                  are passed to the rule.
                                type: object
                              tags:
                                description: 'supports the following:'
                                items:
                                  type: string
                                type: array
                              type:
                                description: The type of rule, which invokes a specific
                                  rule executor that that will run the rule. Google
                                  Common Expression Language (CEL) is used for data
                                  quality and transformation rules, Confluent ENCRYPT
                                  is used for data encryption rules, and JSONata is
                                  used for migration rules.
                                type: string
                            type: object
                          type: array
                      type: object
                    type: array
                  schema:
                    description: The schema string, for example, file("./schema_version_1.avsc").
                      The definition of the Schema.
                    type: string
                  schemaIdentifier:
                    description: The globally unique ID of the Schema, for example,
                      100003. If the same schema is registered under a different subject,
                      the same identifier will be returned. However, the version of
                      the schema may be different under different subjects. Globally
                      unique identifier of the Schema returned for a creation request.
                      It should be used to retrieve this schema from the schemas resource
                      and is different from the schema’s version which is associated
                      with the subject.
                    type: number
                  schemaReference:
                    description: 'The list of referenced schemas (see Schema References
                      for more details): The list of references to other Schemas.'
                    items:
                      properties:
                        name:
                          description: The name of the subject, representing the subject
                            under which the referenced schema is registered. The name
                            of the Schema references (for example, "io.confluent.kafka.example.User").
                            For Avro, the reference name is the fully qualified schema
                            name, for JSON Schema it is a URL, and for Protobuf, it
                            is the name of another Protobuf file.
                          type: string
                        subjectName:
                          description: The name for the reference. (For Avro Schema,
                            the reference name is the fully qualified schema name,
                            for JSON Schema it is a URL, and for Protobuf Schema,
                            it is the name of another Protobuf file.) The name of
                            the referenced Schema Registry Subject (for example, "User").
                          type: string
                        version:
                          description: The version, representing the exact version
                            of the schema under the registered subject. The version
                            of the referenced Schema.
                          type: number
                      type: object
                    type: array
                  schemaRegistryCluster:
                    description: 'supports the following:'
                    items:
                      properties:
                        id:
                          description: The ID of the Schema Registry cluster, for
                            example, lsrc-abc123. The Schema Registry cluster ID (e.g.,
                            `lsrc-abc123`).
                          type: string
                      type: object
                    type: array
                  skipValidationDuringPlan:
                    description: Defaults to false. Defaults to `false`.
                    type: boolean
                  subjectName:
                    description: The name for the reference. (For Avro Schema, the
                      reference name is the fully qualified schema name, for JSON
                      Schema it is a URL, and for Protobuf Schema, it is the name
                      of another Protobuf file.) The name of the Schema Registry Subject.
                    type: string
                  version:
                    description: The version, representing the exact version of the
                      schema under the registered subject. The version number of the
                      Schema.
                    type: number
                type: object
              conditions:
                description: Conditions of the resource.
                items:
                  description: A Condition that may apply to a resource.
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time this condition
                        transitioned from one status to another.
                      format: date-time
                      type: string
                    message:
                      description: A Message containing details about this condition's
                        last transition from one status to another, if any.
                      type: string
                    reason:
                      description: A Reason for this condition's last transition from
                        one status to another.
                      type: string
                    status:
                      description: Status of this condition; is it currently True,
                        False, or Unknown?
                      type: string
                    type:
                      description: Type of this condition. At most one of each condition
                        type may apply to a resource at any point in time.
                      type: string
                  required:
                  - lastTransitionTime
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
